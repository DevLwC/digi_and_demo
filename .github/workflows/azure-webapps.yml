name: Build and Deploy Spring Boot App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  # Azure Container Registry
  ACR_NAME: ContainerRegistryPlayground
  IMAGE_NAME: springboot-app
  
  # Azure Container Instance
  RESOURCE_GROUP: digi_and_demo
  ACI_NAME: springboot-aci
  
  # Application settings
  APP_PORT: 8080

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: 26303757-7fd9-476d-a1e5-a17fa2349090
        tenant-id: e51efa56-0625-4fc1-8dee-ca25181f21da
        subscription-id: 73f0cece-ec82-4e19-a707-7ef7e30fde69

    - name: Build and push Docker image
      run: |
        # Get ACR login server
        ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --query loginServer --output tsv)
        
        # Build Docker image
        docker build -t $ACR_LOGIN_SERVER/$IMAGE_NAME:${{ github.sha }} .
        docker tag $ACR_LOGIN_SERVER/$IMAGE_NAME:${{ github.sha }} $ACR_LOGIN_SERVER/$IMAGE_NAME:latest
        
        # Login to ACR
        az acr login --name $ACR_NAME
        
        # Push images
        docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:${{ github.sha }}
        docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:latest

    - name: Deploy to Azure Container Instance
      env:
        RESOURCE_GROUP: digi_and_demo
        ACR_NAME: myacrname
        ACI_NAME: myaci
        IMAGE_NAME: myapp
        APP_PORT: 8080
        MANAGED_IDENTITY_NAME: myManagedIdentity
      run: |
        set -e
    
        echo "ðŸ”¹ Getting ACR login server..."
        ACR_LOGIN_SERVER=$(az acr show --name "$ACR_NAME" --query loginServer --output tsv)
        echo "ACR login server: $ACR_LOGIN_SERVER"
    
        echo "ðŸ”¹ Getting object ID of managed identity..."
        IDENTITY_OBJECT_ID=$(az identity show \
          --resource-group "$RESOURCE_GROUP" \
          --name "$MANAGED_IDENTITY_NAME" \
          --query principalId -o tsv)
        echo "Managed Identity Object ID: $IDENTITY_OBJECT_ID"
    
        echo "ðŸ”¹ Assigning AcrPull role..."
        az role assignment create \
          --assignee-object-id "$IDENTITY_OBJECT_ID" \
          --role AcrPull \
          --scope $(az acr show --name "$ACR_NAME" --resource-group "$RESOURCE_GROUP" --query id -o tsv) || echo "Role assignment may already exist."
    
        echo "ðŸ”¹ Deleting existing ACI if it exists..."
        az container delete --resource-group "$RESOURCE_GROUP" --name "$ACI_NAME" --yes || true
    
        echo "ðŸ”¹ Creating new ACI..."
        az container create \
          --resource-group "$RESOURCE_GROUP" \
          --name "$ACI_NAME" \
          --image "$ACR_LOGIN_SERVER/$IMAGE_NAME:latest" \
          --assign-identity "/subscriptions/73f0cece-ec82-4e19-a707-7ef7e30fde69/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.ManagedIdentity/userAssignedIdentities/$MANAGED_IDENTITY_NAME" \
          --ports "$APP_PORT" \
          --dns-name-label "$ACI_NAME-${GITHUB_RUN_NUMBER}" \
          --cpu 1 \
          --memory 1.5 \
          --restart-policy Always
    
        echo "âœ… Deployment complete!"

    - name: Get Application URL
      run: |
        # Get the FQDN of the deployed container
        FQDN=$(az container show --resource-group $RESOURCE_GROUP --name $ACI_NAME --query ipAddress.fqdn --output tsv)
        echo "ðŸš€ Application deployed successfully!"
        echo "ðŸ“± Application URL: http://$FQDN:$APP_PORT"
        echo "ðŸ”— Access your Spring Boot app at: http://$FQDN:$APP_PORT"
